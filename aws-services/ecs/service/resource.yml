AWSTemplateFormatVersion: 2010-09-09 
Description: Deploy ECS Fargate Application Service.
Parameters:
  stage:
    Type: String
    Default: dev
    AllowedValues:
      - pdn
      - uat
      - qa
      - dev
  project:
    Type: String
  clusterName:
    Type: String
  loadBalancerSecurityGroupId:
    Type: String
  loadBalancerListenerARN:
    Type: String
  namespaceId:
    Type: String
  containerCPU:
    Type: Number
    Default: 256
    AllowedValues:
      - 256 
      - 512 
      - 1024
      - 2048
      - 4096
  containerRAM:
    Type: String
    Default: 0.5GB
    AllowedValues:
      - 0.5GB
      - 1GB
      - 2GB
      - 3GB
      - 4GB
      - 5GB
      - 7GB
      - 8GB
      - 9GB
      - 10GB
      - 11GB
      - 12GB
      - 13GB
      - 14GB
      - 15GB
      - 16GB
      - 17GB
      - 18GB
      - 19GB
      - 20GB
      - 21GB
      - 22GB
      - 23GB
      - 24GB
      - 25GB
      - 26GB
      - 27GB
      - 28GB
      - 29GB
      - 30GB
  imageVersion:
    Type: String
    Default: latest
  imageRepoUri:
    Type: String
  serviceName:
    Type: String
  containerPort:
    Type: Number
    Default: 8080
  healthCheckPath:
    Type: String
    Default: /
  basePath:
    Type: String
    Default: /
  priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  # for desired task of service
  desiredTask:
    Type: Number
    Default: 1
  # for autoscaling
  minContainers:
    Type: Number
    Default: 2
  # for autoscaling
  maxContainers:
    Type: Number
    Default: 4
  # target CPU utilization (%)
  autoScalingTargetValue:
    Type: Number
    Default: 80
  autoScalingRoleARN:
    Type: String
  executionRoleARN:
    Type: String
  taskRoleARN:
    Type: String
  internalSecurityGroupId:
    Type: String

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/task/${project}/${stage}/${serviceName}' 
       
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Sub 'ecs-${project}-${stage}-${serviceName}-task'
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: !Ref containerCPU
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: !Ref containerRAM
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref executionRoleARN
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref taskRoleARN
      ContainerDefinitions:
        - Name: !Ref serviceName
          Image: !Sub '${imageRepoUri}:${imageVersion}'
          PortMappings:
            - ContainerPort: !Ref containerPort
          LinuxParameters:
            InitProcessEnabled: True
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub 'ecs-${project}-${stage}-${serviceName}-task'
  
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'secg-${project}-${stage}-${serviceName}-container'
      GroupDescription: !Sub 'SG for container ${project}-${stage}-${serviceName}'
      VpcId: !ImportValue mainVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref containerPort
          ToPort: !Ref containerPort
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroupId
      Tags:
        - Key: Name
          Value: !Sub 'secg-${project}-${stage}-${serviceName}-container'
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref healthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub '${project}-${stage}-${serviceName}'
      Port: !Ref containerPort
      Protocol: HTTP # Comunicate to container.
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !ImportValue mainVpcId
      Tags:
        - Key: Name
          Value: !Sub 'elb-${project}-${stage}-${serviceName}-tg'
  
  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub '${basePath}/*'
      ListenerArn: !Ref loadBalancerListenerARN
      Priority: !Ref 'priority'

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: !Sub "Discovery Service for ${project} ${stage}"
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Ref serviceName
      NamespaceId: !Ref namespaceId
      Tags:
        - Key: Name
          Value: !Sub 'dsrv-${project}-${stage}-${serviceName}'

  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - DiscoveryService
      - LoadBalancerRule
    Properties: 
      ServiceName: !Sub 'ecs-${project}-${stage}-${serviceName}-service'
      Cluster: !Ref clusterName
      TaskDefinition: !Ref TaskDefinition
      PropagateTags: TASK_DEFINITION
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref desiredTask
      EnableExecuteCommand: True
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE # FARGATE_SPOT
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets: 
            - !ImportValue PrivateSubnet1EC2
            - !ImportValue PrivateSubnet2EC2
            - !ImportValue PrivateSubnet3EC2
          SecurityGroups:
            - !Ref internalSecurityGroupId
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref serviceName
          ContainerPort: !Ref containerPort
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          Port: !Ref containerPort
      Tags:
        - Key: Name
          Value: !Sub 'ecs-${project}-${stage}-${serviceName}-service'
    
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref minContainers
      MaxCapacity: !Ref maxContainers
      ResourceId: !Join ['/', [service, !Ref clusterName, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !Ref autoScalingRoleARN

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub 'aas-${project}-${stage}-${serviceName}-ecs-autoscalingpolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 120
        # Keep things at or lower than 80% CPU utilization, for example
        TargetValue: !Ref autoScalingTargetValue
